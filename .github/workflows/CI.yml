name: React CI/CD

# This workflow runs on every push to the main branch and pull requests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Define the jobs
jobs:
  build:

    # Specify the environment this job runs in
    runs-on: ubuntu-latest

    # Steps in the job
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js (version 18.x in this example)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      # Step 3: Install dependencies (npm install)
      - name: Install dependencies
        run: npm install

      # Step 4: Build the React app
      - name: Build the React app
        run: npm run build

      # Step 5: Run tests (optional, based on your setup)
      - name: Run tests
        run: npm test

  deploy:
    # This job will only run on the main branch and if the build is successful
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      # Step 3: Install dependencies (npm install)
      - name: Install dependencies
        run: npm install

      # Step 4: Build the React app
      - name: Build the React app
        run: npm run build

      - name: Trivy Scan
        run:
          trivy fs --format table -o trivy-fs-report.html .
      - name: Official SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v3.0.0
            
      # Ex: v2.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
        env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: Intall JQ
        run:
          sudo apt-get update && sudo apt-get install -y jq
      - name: SonarQube Quality Gate Check 
        id: sonarqube-quality-gate-check
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL
  
    # Optionally you can use the output from the Quality Gate in another step.
    # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
      - name: "Example show SonarQube Quality Gate Status value"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Doker Build Image
        run: docker build -t imishrarohit/boardgame:latest .
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    # - name: Docker push
      - run:
        docker push imishrarohit/boardgame:latest

    - name: Kubectl Action
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ secrets.KUBE_CONFIG }}
    - run:
         kubectl apply -f deployment-service.yaml
